---

- name: "Include {{ ansible_distribution }} tasks"
  include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags: install

# TODO (VDO): replace by package
- name: Download blackbox exporter binary to local folder
  become: false
  unarchive:
    src: "https://github.com/prometheus/blackbox_exporter/releases/download/v{{ openio_blackbox_exporter_version }}\
/blackbox_exporter-{{ openio_blackbox_exporter_version }}.linux-\
{{ go_arch_map[ansible_architecture] | default(ansible_architecture) }}.tar.gz"
    dest: "/tmp"
    remote_src: true
    creates: "/tmp/blackbox_exporter-{{ openio_blackbox_exporter_version }}.linux-\
{{ go_arch_map[ansible_architecture] | default(ansible_architecture) }}/blackbox_exporter"
  register: _download_binary
  until: _download_binary is succeeded
  retries: 5
  delay: 2
  delegate_to: localhost
  check_mode: false
  tags: install

- name: Propagate blackbox exporter binary
  copy:
    src: "/tmp/blackbox_exporter-{{ openio_blackbox_exporter_version }}.linux-\
{{ go_arch_map[ansible_architecture] | default(ansible_architecture) }}/blackbox_exporter"
    dest: "/usr/local/bin/blackbox_exporter"
    mode: 0750
    owner: "openio"
    group: "openio"
  tags: install

- name: Ensure blackbox exporter binary has cap_net_raw capability
  capabilities:
    path: '/usr/local/bin/blackbox_exporter'
    capability: cap_net_raw+ep
    state: present
  ignore_errors: "{{ ansible_check_mode }}"
  tags: install

- name: Create systemd service unit
  copy:
    src: "blackbox_exporter.service"
    dest: "/etc/systemd/system/blackbox_exporter.service"
    owner: "openio"
    group: "openio"
  tags: install
  register: _blackbox_systemd

- name: Create defaults file
  template:
    src: blackbox_opts.j2
    dest: /etc/default/blackbox_exporter
    owner: root
    group: root
    mode: 0644
  register: _blackbox_defaults

- name: Set blackbox configuration
  copy:
    src: "blackbox_exporter.yml"
    dest: "{{ openio_blackbox_config_file }}"
    owner: "openio"
    group: "openio"
  tags: configure
  register: _blackbox_conf

- name: Ensure blackbox service is started and enabled
  systemd:
    daemon_reload: true
    name: blackbox_exporter
    state: "restarted"
    enabled: true
  when:
    - _blackbox_systemd is changed or _blackbox_conf is changed or _blackbox_defaults is changed
    - not openio_blackbox_provision_only

- name: Check that service is up
  uri:
    url: "http://{{ openio_blackbox_bind_address }}:{{ openio_blackbox_bind_port }}"
    return_content: true
    status_code: 200
    register: _blackbox_check
    retries: 3
    delay: 5
    until: _blackbox_check is success
    changed_when: false
  when:
    - not openio_blackbox_provision_only
...
